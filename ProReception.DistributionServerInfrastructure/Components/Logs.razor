@namespace ProReception.DistributionServerInfrastructure.Components

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using ProReception.DistributionServerInfrastructure.Hubs
@using ProReception.DistributionServerInfrastructure.Settings

@inject NavigationManager NavigationManager
@inject LogService LogService
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

<MudText Typo="Typo.h3" GutterBottom="true">Logs</MudText>

<MudText Typo="Typo.body1" GutterBottom="true">Log files are stored here: @LogService.GetLogFilesPath()</MudText>

<MudExpansionPanels Multiple="true">
    <MudExpansionPanel Text="Log Files">
        <MudList>
            @foreach (var logFileName in _logFileNames)
            {
                <MudListItem>
                    <a href="javascript:void(0)" @onclick="() => DownloadLogFile(logFileName)">@logFileName</a>
                </MudListItem>
            }
        </MudList>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Live Logs">
        @if (_logs.Count == 0)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudTable Items="@_logs.OrderByDescending(x => x.Timestamp)" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Timestamp</MudTh>
                    <MudTh>Message</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Timestamp">@context.Timestamp.ToString("s")</MudTd>
                    <MudTd DataLabel="Log message">@context.Message</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private HubConnection? _hubConnection;
    private readonly List<LogsHub.LogMessage> _logs = new();
    private IEnumerable<string> _logFileNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _logFileNames = LogService.GetLogFileNames();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/logs-hub"))
            .Build();

        _hubConnection.On<LogsHub.LogMessage>("ReceiveLog", logMessage =>
        {
            _logs.Add(logMessage);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private async Task DownloadLogFile(string fileName)
    {
        var fileStream = LogService.GetLogFileStream(fileName);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();
        var base64String = Convert.ToBase64String(fileBytes);

        await JsRuntime.InvokeVoidAsync("downloadFileFromBlazor", fileName, "text/plain", base64String);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}

<script>
    function downloadFileFromBlazor(filename, contentType, contentBase64) {
        const content = atob(contentBase64); // Decode Base64 string
        const arrayBuffer = new Uint8Array(content.length);
        for (let i = 0; i < content.length; i++) {
            arrayBuffer[i] = content.charCodeAt(i);
        }
        const blob = new Blob([arrayBuffer], { type: contentType });
        
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link); // Required for Firefox
        link.click();
        document.body.removeChild(link);
    }
</script>
